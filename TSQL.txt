
T/SQL = Transact SQL

>> T/SQL Stands for "Transact Structure Query Language".It is an extension of SQL Language.This is 
   same as PL/SQL in Oracle.

>> In SQL we can execute single line of statement only where in T/SQL we can execute block of 
   statements at a time.

>> SQL does not support conditional and looping statement  like if-else and while,for loops.But we 
   can implement these conditional and looping statements in T/SQL.

>> SQL Language will not provide reusability facilities where as T/SQL language will provide 
   reusability by defining objects such as Procedures and functions.

>> T/SQL commands can be embedded inside the programs where program is a block of code.

# T/SQL program blocks can be divided into two types.
	1. Anonymous blocks : anonymous blocks are called as unnamed block of code which is executed
		at  any point of time and does not store on database.These blocks can be written on 
		Query window and execute.

	2. Sub-program blocks : Sub program blocks are called as Named block of code which is executed
		at any point of time and stored on database.These blocks are providing resuability of 
		code.


# Declaring Variables In T/SQL Program
Syntax : Declare @variableName datatype[Size]...

ex : declare @empId int;
     declare @ename varchar(20);	

Note  : While declaring variable,we should  be prefixed with @ symbol. 

# Assigning values of Variables : Values can be assigned by using a 'SET' statement

Syntax : Set @VariableName = value

ex : Set @empId = 101;
     Set @ename = 'Amit';	

# Printing Values of Variables : If we want to print the values we can use the 'PRINT' statement
Syntax : Print @VariableName

ex : Print @empId;

# Structure of T/SQl Program

Syntax : 
	Declare @variableName datatype[Size]...

	Set @VariableName = value

	Statements ;

	Print @VariableName


Ex1 : Write a T/SQL Program to input two values and interchange the variable values

	declare @a int,@b int,@c int; 
	
	set @a = 10;
	set @b = 20;
	
	Print @a;
	Print @b;

Ex2 :  Write a  T/SQl program to input student id ,name,marks and find the total marks of student

declare @id int,@name varchar(30),@m1 int,@m2 int,@m3 int,@total int;
Set @id= 101;
Set @name = 'Amit';
Set @m1 = 75;
Set @m2 = 86;
Set @m3 = 91;
Set @total = @m1 + @m2 + @m3;
Print @id;
Print @name;
Print @total;


Ex 3 : Write a T/SQL Program to perform arithematic opertion.

declare @num1 int,@num2 int,@result int;
set @num1 = 20;
set @num2 = 10;

Set @result = @num1 + @num2;
print @result


Conditional Statements : It is a block of code ,which executes based on a condition.

# If-else Statement : In If-else conditional control statement,If block gets executes only
 when condition is true and statements in else block get executes only when the condition is false

Synatx : 
	if(condition)
	{
	 Statements
	}
	else
	{
	Statements
	}


Ex 4 : Write a T/SQL Program to find big number from two variables
 declare @a int,@b int;
 set @a = 30;
 set @b = 20;
 if(@a>@b)
 {
 Print 'A is big'
 }
 else 
 {
 Print 'B is big'
 }

 Ex 5 : To find +ve and -ve Number

 declare @a int;
 Set @a = 10;
 if(@a>0)
 Print 'A is +ve Number'
 if(@a = 0)
  Print 'A is neutral Number'
 else
 Print 'A is -ve Number'

Ex 6 : Write a T/SQL program to find number is even or odd


Case Function :  The case function if we want to use multiple conditional statements in program and 
execute only the true condition block or what we input that result

Syntax : 

Selcet case @VariableName

when caseValue then 'display value'  

when caseValue then 'display value'

when caseValue then 'display value'

end

ex 7 :
 declare @weekdays int
 Set @weekdays = 7
 Select Case @weekdays
 when 1 Then 'Sunday'
	'No Work'
 when 2 Then 'Monday'
	'Inventry checking'
	select * from inventry
 when 3 Then 'Tuesday'
	select * from sales
 when 4 Then 'Wednesday'
 when 5 Then 'Thursday'
 when 6 Then 'Friday'
 when 7 Then 'Saturday'
 end

OR

Syntax : 

Selcet case 

when @VariableName=caseValue then 'display value'

when @VariableName=caseValue then 'display value'

when @VariableName=caseValue then 'display value'

end


# While Loop : Sets a condition for repeated execution of an SQL Statement or  statement block.The
statement block are executed repeatedly as long as the specified condition is true.The execution of 
statements in while loop can be controlled from outside the loop with BREAK and CONTINUE keys.

Syntax : 
 WHILE Boolean expression
 [BIGIN]
	<SQl statement / block >
	[BREAK]
	<SQl statement / block >
	[CONTINUE]
	<SQl statement / block >
 [END]


BREAK  : It Causes an exit from the inner most while loop.Any statements that appear after End Keyword,
marking the end loop,are executed

CONTINUE : It Causes  the While loop ton restart,ignoring any statements after the CONTINUE keyword


Ex 8 : Write a T/SQL program to print value fron 1-10 using while loop
	declare @x int
	set @x = 0

	While @x<10 
	BEGIN
		Set @x = @x+1
		Print @x * 10                       
	End


Ex 9 : Write a T/SQL program to print value fron 1-10 and stop the loop when value reaches to 6 using while
 loop
	declare @x int
	set @x = 0

	While @x<10
	BEGIN
		Set @x = @x+1
		Print @x
	End

Ex 10 : Write a T/SQL program which takes the empno and increments the salary of employee on following criteria
	1. If job is President increment with 10%
	2. If job is Manager increment with 8%
	3. If job is Analyst increment with 6%
	4. If job is any thing other increment with 5%

declare @empno int,@job varchar(50)
Set @empno = 7839

select @job = job  from emp where empno=@empno

If @job = 'President'
	Update emp set sal = sal + sal * 0.1 where empno = @empno

Else If @job = 'Manager'
	Update emp set sal = sal + sal * 0.08 where empno = @empno

Else If @job = 'Analyst '
	Update emp set sal = sal + sal * 0.06 where empno = @empno

Else
	Update emp set sal = sal + sal * 0.05 where empno = @empno



SUB-Programs : A sub program is a named block of code that is directly saved on server and it can be executed 
	when and where ir is requied.We have two types of sub-programs in SQL Server

	1. Stored Procedures / Procedure
	2. Stored Functions/Functions


1. Stored Procedures / Procedure : A Stored Procedure is a database object which contains precompiled queries.
	Stored procedures are a block of code designed to perform a task whenever we called.

Why we need Stored Procedure : Whenever we want to execute a SQL query from an application the SQL query will 
	first parsed(i.e. Compiled) for execution where the process of parsing is time consuming bcoz parsing
	occurs each and every time we execute the query or statement.
	
	To overcome the above problem we write SQL statements or queries under stored procedure and execute
	bcoz a stored proc edure is pre compiled block of code without parsing the statements gets executed 
	whenever the procedures are called which can increase the performance of an application. 


# How to create Stored Procedures/Procedure (Without parameter)
Syntax : 
	create Procedure ProceduresName
	As
	Begin
		<Statements>
	End

	Note :  Once the procedure is created it is physically saved on the server as a database Object which
	can be called whenever we required to the user

	We can call the above procedure from anywhere and from any application that is developed 
	using JAVA or .Net language


# How to call a Stored Procedures/Procedure

Syntax : exec ProcedureName


Ex 11. Examples on without parameters Procedures : 

1. Write a simple procedure program (without parameters) to print WELCOME statement on the query window

 
 create Procedure Test1
 As
 Begin
	print 'Welcome to stored Procedure'
 End

----------------------------------------
	How to execute

	exec Test1

	O/p : Welcome to stored Procedure

# Passing Parameters to Procedures : If we want to pass parameters to procedure then we are using the below
syntax

Syntax : Create procedures ProcedureName
	
	 (Passing parameters)

	 As

	 Begin

	    <Statements>
    	End
	

Ex 12. Examples on parameters Procedures : 

Write a program  to add the two values with parameters Procedure


Create procedure addTwo(@a int,@b int)
as
begin
declare @c int
Set @c = @a + @b;
Print 'Addition ='+cast(@c as varchar);
end


----------------------------------------
	How to execute

	exec addTwo 2,3

	O/p : Addition = 5


Ex 13. Create a procedure to display employee details of employee from emp table

create procedure empSearch
as
begin
select * from Emp
end


Ex 14. Create a procedure to accept employee id and delete the record from emp table

create procedure empDel(@eid int)
as
begin
delete from emp where empno = @eid
end 


Ex 15:  Write a program to perform arithmetic opertions of two values with parameters procedure

create procedure arithmetic(@a int,@b int)
As
Begin
   declare @add int,@sub int,@mult int,@div int

   Set @add = @a + @b;
   Set @sub = @a - @b;
   Set @mult = @a * @b;
   Set @div = @a / @b;

   Print 'Addition = '+cast(@add as varchar);	
   Print 'Sub = '+cast(@sub as varchar);
   Print 'Multiplication = '+cast(@mult as varchar);
   Print 'Division = '+cast(@div as varchar);
	
end

----------------------------------------
	How to execute

	exec arithemtic 8,2

	O/p : Addition = 10
	      sub = 6
	      Multiplication= 16
	      Division= 4


Ex 16. Create a procedure to accept empno and update the employee details from emp table

create procedure empUpdate (@empno int,@ename varchar(max),@job varchar(max),sal int)
As
Begin
  update emp set ename = @ename,job= @job,sal = @sal where empno = @empno
End

----------------------------------------
	How to execute

exec empUpdate 7788,'Rohit','SALESMAN',1500

Ex 17. Create a procedure to add records in emp table

create procedure empRecord(@empno int,@ename varchar(30),@job varchar(30),@mgr int,@hiredate date,@sal int,@comm int,
	@deptno int)
As
Begin
  insert into emp values(@empno,@ename,@job,@mgr,@hiredate,@sal,@comm,@deptno)
End

----------------------------------------
	How to execute
exec empRecord 8200,'AJIT','SALESMAN',7369,'1990-02-12',1550,200,30

Ex 18 :  Write a procedure to insert records into two tables [ emp and dept table]

create procedure TwoTableRecord(@empno int,@ename varchar(30),@job varchar(30),@mgr int,@hiredate date,@sal int,@comm int,
	@deptno int,@dname varchar(50),@loc varchar(30))
As
Begin
  insert into emp values(@empno,@ename,@job,@mgr,@hiredate,@sal,@comm,@deptno)
  insert into dept values(@deptno,@dname,@loc)
End

----------------------------------------
	How to execute
exec TwoTableRecord 8210,'JOHN','DBA',7512,'1991-12-12',2500,410,60,'DBA','MUMBAI'


Ex 19 : Write a procedure with default values : 

Create procedure DefaultValue(@x int = 100,@y int)
As
Begin
    declare @add int
    set @add = @x + @y
    print 'Addition = '+cast(@add as varchar)
End


----------------------------------------
	How to execute

1.  exec DefaultValue @x=Default,@y=200

2.  exec DefaultValue @y=200


Ex 20 : Write a Procedure which takes the empno and prints the Net Salary of the Employee

create procedure Net_Sal(@empno int)
As
Begin
  Declare @NetSal int,@sal int,@comm int
  exec  NetCalculation @empno
  select @sal = sal,@comm = comm from emp where empno = @empno
  set @NetSal = @sal + @comm
  Print 'Net Salary = '+cast(@NetSal as varchar)
End

# How to drop Stored Procedure / Procedure

Syntax : Drop Procedure ProcedureName


2. Stored Functions/Functions : Function  is a block code similar to a stored procedure which is also
used to perform an action and returns results as a value.Function can be into two types,these are

	1. Scalar-Valued Function : In this case we can return a attribute datatype as an output from 
		function.

	How to create Scalar - valued function : 
	 
	Create function functionName (@parameter datatype[Size])
	Returns <return attribute datatype>

	As
   	Begin
	   Return <return attribute Name>
	End


	Ex 21 : Create a function to return the cube of the given value 
		create function findCube(@x int)
		Returns int
		As
		Begin
		  return @x * @x * @x
		End

	How to Call Scalar Valued Function : 
	Syntax : select dbo.functionName(value)
	
	select dbo.findCube(3)

	Ex 22. Create a Function that takes an employee id and returns the salary of that employee

	create function empSal(@empno int)
	Returns int
	As
	Begin
	   declare @sal int
	   select @sal = sal from emp where empno = @empno
	   return @sal	
	End
	----------------------------------------
	How to call 

	select dbo.empSal(8100)


	2. Table-Valued Function :  In this case we can return a table as an output from the function

	Syntax : 
		create function functionName(@parameter datatype[Size])
		Returns<Table>
		As
		return(return select statement>

	Ex 23. Create a function that accept the employee id and returns the employee details from 
		the employee table

		create function empDetail(@empno int)
		returns table 
		As
		return(select * from emp where empno = @empno)

	How to call Table-valued Function
	Syntax :  select * from functionName(value)

	select * from empDetail(8012)


	Ex 24. Create a function to get deptno and returns list of employee working in emp and dept 
	       tables

	      	create function empdata(@deptno int)
		returns table 
		as
		return(select e.empno,e.ename,e.sal,d.deptno,d.dname,d.loc from 
		emp e Inner Join dept d ON e.deptno = d.deptno where e.deptno = @deptno)


How to drop Function

Syntax : drop function functionName

ex : drop function empdata


# Triggers : A trigger is a special type of procedure that will used to provide restrict on the 
    tables when a language[SQL] events executed.

1. DML Triggers [Insert, Delete, Update ]

2. DDL Triggers [Create,Alter,drop,truncate ]


1. DML Triggers : DML Triggers execute when the user tried to modify or change data through 
	DML language events.Those are inserting,update and delete statements on table.

	DML triggers can be used to enforce business rules and data integrity.With the help of a DML 
	Triggers we can enforce integrity which cannot be done with constraints

Syntax : Create Trigger TriggerName On TableName
	 
	 For [Insert,Update,Delete ]
	
	 As
	
	 Begin
      	   <Statements>
	 End


Ex 25: Write a Trigger that will convert the dname and Location into Upper case when the user insert 
	lowercase.

	create trigger UpperTrigger On Dept after insert
	As
 	Begin
	   declare @deptno int,@dname varchar(50),@loc varchar(50)
	   select @deptno = deptno,@dname = dname,@loc = loc from inserted 
	   update dept set dname = upper(@dname),loc = upper(@loc) where deptno = @deptno
	end


Ex 26 : Write a trigger that will restrict the operations to be performed before 9 am and after 5 pm
	 

	create trigger op_time On Emp After Insert,Update,delete

	As

	Begin
	
		declare @dt int
			
		set @dt = DATENAME(HH,GETDATE())

		if @dt not between 9 and 16
		
		Begin
                   Rollback
		   Raiserror('Cannot perform DML Operations',15,1)	
		End
	End


Ex 27: A program which will restrict the delete opertion if the job of the employee is Manager

	create trigger emp_del On emp After delete
	As
	
	Begin
	  Declare @job varchar(50)
	  select @job = job from deleted
	  If @job = 'Manager'
		Begin
		 Rollback
		 Raiserror('Cannot Delete manager from the Table',15,1)
		End
	End

Dropping DML Triggers : 

Syntax : drop Trigger TriggerName
	
	
2. DDL Triggers : DDL triggers fire in response  to a DDL event like create,Alter,drop etc. 
	A DDL Triggers is special type of procedure that executes in response to database scoped event


Syntax : Create Trigger TriggerName ON Database After<Event type>

	 As
	
	 Begin
      	   <Statements>
	 End


Ex 27: Write a trigger which restrics dropping of table from the database

create trigger cancel_drop On Database after drop_table
As
Begin
	RollBack
	Raiserror('Cannot drop table from this Database',1,1)
End


Ex 28. Write a trigger which restrict creating a table from the database

create trigger stop_creation On Database after create_table
As
Begin
	RollBack
	Raiserror('Cannot create table under this this Database',1,1)
End


Ex 29. Write a trigger which restrict to alter table under the database

create trigger stop_Alteration On Database after Alter_table
As
Begin
	RollBack
	Raiserror('Cannot Alter table under this Database',1,1)
End

Dropping DDL Triggers : 

Syntax : drop Trigger TriggerName ON Database